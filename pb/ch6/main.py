### Eli Blaney ###
###  BIO 501   ###
### Chapter 6  ###
### 2022-01-26 ###
print("Chapter 6 Exercises")

### Exercise 6.1 ###
print("Exercise 6.1\n")

# Open the data file for reading
data = open("data.csv")

# Since we will be referring back to the same file so many times,
# we can avoid needing to close and reopen the file repeatedly by
# converting the file into a list; that is, each line of the file
# will be its own string element in the list, and we can refer back
# to any part of the list at any time.
lines = list(data)

# We don't need the file anymore, we can just use the lines variable
data.close()

# Iterate through all of the lines in the file to find genes that are
# from Drosophila melanogaster or Drosophila simulans
for line in lines:
    # Remove the newline, and convert the comma-separated values into
    # their own separate, named variables for increased readability.
    # Here, we use "iterable unpacking" to "unpack" the elements of the
    # list generated by split() into four distinct variables.
    # Since we only need the species and the gene name, we can use
    # underscores as placeholders for the variables we don't need.
    species, _, name, _ = line.rstrip().split(",")
    # Use a conditional "or" statement to print out the gene name only if
    # the species where the gene originates is one of the two that we are
    # interested in here.
    if species == "Drosophila melanogaster" or species == "Drosophila simulans":
        print(name)

### Exercise 6.2 ###
print("\nExercise 6.2\n")

# Like before, we can just use the same lines list variable to go through
# all of the genes. We do not need to re-open the file because the
# converted list that contains the lines is not tied to the file.
for line in lines:
    # Like before, we can unpack the comma-separated values into distinct
    # variables that we can name and use independently. Here, we only need
    # the DNA sequence and gene name, so the others are replaced with _.
    _, dna, name, _ = line.rstrip().split(",")
    # Determine the length of the gene by measuring the provided DNA
    gene_length = len(dna)
    # We want to print if the gene length is between 90 and 110,
    # exclusively on both bounds.
    if gene_length > 90 and gene_length < 110:
        print(name)

### Exercise 6.3 ###
print("\nExercise 6.3\n")

# Helper function to get the AT content as a float from 0 to 1
# It takes advantage of upper() and individual base counts to
# most effectively parse dirty DNA sequences.
def get_at_content(dna):
    dna = dna.upper()
    a = dna.count('A')
    t = dna.count('T')
    g = dna.count('G')
    c = dna.count('C')
    return ((a + t) / (a + t + c + g))

# Like before, we can iterate through each line in the file
# without needing to reopen it.
for line in lines:
    # Like before, unpack the list componenets to separate variables.
    # We don't need the species, so it is represented as an underscore.
    _, dna, name, expression = line.rstrip().split(",")
    # Convert the string representation of the expression into
    # an integer that we use for our comparison condition.
    expression = int(expression)
    # We only want to print the genes that have LESS than 50% AT content
    # AND that have an expression level OVER 200
    if get_at_content(dna) < 0.5 and expression > 200:
        print(name)

### Exercise 6.4 ###
print("\nExercise 6.4\n")

# Iterate through each line in our useful list representation of the file
for line in lines:
    # We only need the species and gene name here
    species, _, name, _ = line.rstrip().split(",")
    # Only print the genes having names starting with k or h as long as they are
    # not from the species Drosophila melanogaster.
    if species != "Drosophila melanogaster" and (name.startswith('k') or name.startswith('h')):
        print(name)

### Exercise 6.5 ###
print("\nExercise 6.5\n")

# Iterate through the lines in the file one last time
for line in lines:
    # Grab the DNA sequence and gene name
    _, dna, name, _ = line.rstrip().split(",")
    # Determine the AT content like in Exercise 6.3
    at_content = get_at_content(dna)
    # Assign a default 'medium' score for the AT content
    score = 'medium'
    # If the AT content is less than or equal to 45%, the score is low
    if at_content <= 0.45:
        score = 'low'
    # ELSE IF the AT content is greater than or equal to 65%, the score is high
    elif at_content >= 0.65:
        score = 'high'
    # (Otherwise, the AT content is between 45% and 65%, and the score remains as medium)

    # Make a nice English sentence using the score we found.
    print(name, "has a", score, "AT content.")
